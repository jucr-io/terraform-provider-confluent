before:
  hooks:
    # to avoid goreleaser error due to `make deps` on CI: git is currently in a dirty state
    # we should never see go.mod be dirty because we `go build -mod=readonly`, but we can't well control go.sum updates
    - git checkout go.sum

builds:
  - binary: '{{ .ProjectName }}_{{ .Version }}'
    id: "macos_linux"
    flags:
      - -mod=readonly
    ldflags:
      - -s -w -X main.version={{ .Version }}
    gcflags:
      - all=-trimpath={{ .Env.GOPATH }}
    asmflags:
      - all=-trimpath={{ .Env.GOPATH }}
    goos:
      - darwin
      - linux
    goarch:
      - amd64
      - arm64
    ignore:
      - goos: linux
        goarch: arm64
    env:
      - CGO_ENABLED=0
    # https://goreleaser.com/customization/build/#reproducible-builds
    mod_timestamp: '{{ .CommitTimestamp }}'

# builds:
#   - binary: '{{ .ProjectName }}_{{ .Version }}'
#     id: "default"
#     flags:
#       - -mod=readonly
#     ldflags:
#       - -s -w -X main.version={{ .Version }}
#     gcflags:
#       - all=-trimpath={{ .Env.GOPATH }}
#     asmflags:
#       - all=-trimpath={{ .Env.GOPATH }}
#     goos:
#       - linux
#       - darwin
#     goarch:
#       - amd64
#       - '386'
#       - arm
#       - arm64
#     ignore:
#       - goos: darwin
#         goarch: '386'
#       - goos: linux
#         goarch: amd64
#       - goos: linux
#         goarch: arm64
#     env:
#       - CGO_ENABLED=0
#     # https://goreleaser.com/customization/build/#reproducible-builds
#     mod_timestamp: '{{ .CommitTimestamp }}'
#   - binary: '{{ .ProjectName }}_{{ .Version }}'
#     id: "linux-amd64-build"
#     flags:
#       - -mod=readonly
#     ldflags:
#       - -s -w -X main.version={{ .Version }}
#       - -linkmode 'external' -extldflags '-static'
#     gcflags:
#       - all=-trimpath={{ .Env.GOPATH }}
#     asmflags:
#       - all=-trimpath={{ .Env.GOPATH }}
#     goos:
#       - linux
#     goarch:
#       - amd64
#     env:
#       - CGO_ENABLED=1
#       - GOEXPERIMENT=boringcrypto
#     # https://goreleaser.com/customization/build/#reproducible-builds
#     mod_timestamp: '{{ .CommitTimestamp }}'
#   # - binary: '{{ .ProjectName }}_{{ .Version }}'
#   #   id: "linux-arm64-build"
#   #   flags:
#   #     - -mod=readonly
#   #   ldflags:
#   #     - -s -w -X main.version={{ .Version }}
#   #     - -linkmode 'external' -extldflags '-static'
#   #   gcflags:
#   #     - all=-trimpath={{ .Env.GOPATH }}
#   #   asmflags:
#   #     - all=-trimpath={{ .Env.GOPATH }}
#   #   goos:
#   #     - linux
#   #   goarch:
#   #     - arm64
#   #   env:
#   #     - CGO_ENABLED=1
#   #     - GOEXPERIMENT=boringcrypto
#   #     - CC=aarch64-linux-gnu-gcc
#   #   # https://goreleaser.com/customization/build/#reproducible-builds
#   #   mod_timestamp: '{{ .CommitTimestamp }}'

archives:
  - name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}'
    format: zip
    files:
      - README.md
      - LICENSE
      - legal/**/*

archives:
- format: zip
  name_template: '{{ .ProjectName }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}'
checksum:
  extra_files:
    - glob: 'terraform-registry-manifest.json'
      name_template: '{{ .ProjectName }}_{{ .Version }}_manifest.json'
  name_template: '{{ .ProjectName }}_{{ .Version }}_SHA256SUMS'
  algorithm: sha256

checksum:
  # This suffix is required for Terraform Registry
  # https://www.terraform.io/docs/registry/providers/publishing.html#manually-preparing-a-release
  name_template: '{{ .ProjectName }}_{{ .Version }}_SHA256SUMS'

signs:
  - artifacts: checksum
    cmd: gpg
    args: ['--batch', '-u', '{{ .Env.GPG_FINGERPRINT }}', '--output', '${signature}', '--detach-sign', '${artifact}']
    stdin: '{{ .Env.GPG_PASSWORD }}'

changelog:
  sort: asc
  filters:
    exclude:
      - '^chore:'
      - '[ci skip]$'
      - make fmt
      - fix go.sum
      - go mod tidy

release:
  extra_files:
    - glob: 'terraform-registry-manifest.json'
      name_template: '{{ .ProjectName }}_{{ .Version }}_manifest.json'
